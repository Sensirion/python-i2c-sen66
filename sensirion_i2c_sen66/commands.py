#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2024 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.0.1
# Product:       sen66
# Model-Version: 1.2.0
#
"""
The transfer classes specify the data that is transferred between host and sensor. The generated transfer classes
are used by the driver class and not intended for direct use.
"""

from sensirion_driver_adapters.transfer import Transfer
from sensirion_driver_adapters.rx_tx_data import TxData, RxData


class DeviceReset(Transfer):
    """Executes a reset on the device. This has the same effect as a power cycle."""

    CMD_ID = 0xd304

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=1.2, slave_address=None, ignore_ack=False)


class StartContinuousMeasurement(Transfer):
    """
    Starts a continuous measurement.
    After power up, wait at least 500 ms before sending this
    command. After sending this command, wait at least 1100 ms before
    reading measurements.
    This command is only available in idle mode. If the device is already
    in any measure mode, this command has no effect.
    """

    CMD_ID = 0x21

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.05, slave_address=None, ignore_ack=False)


class StopMeasurement(Transfer):
    """
    Stops the measurement and returns to idle mode. After sending this
    command, wait at least 1000 ms before starting a new measurement.
    If the device is already in idle mode, this command has no effect.
    """

    CMD_ID = 0x104

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.16, slave_address=None, ignore_ack=False)


class GetDataReady(Transfer):
    """
    This command can be used to check if new measurement results are ready to read. The data ready flag
    is automatically reset after reading the measurement values.
    """

    CMD_ID = 0x202

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.02, slave_address=None, ignore_ack=False)
    rx = RxData('>B?')


class ReadMeasuredValuesAsIntegers(Transfer):
    """
    Returns the measured values.
    The command 0x0202 \"Get Data Ready\" can be used to check if new
    data is available since the last read operation. If no new data is
    available, the previous values will be returned again. If no data
    is available at all (e.g. measurement not running for at least one
    second), all values will be at their upper limit (0xFFFF for `uint16`,
    0x7FFF for `int16`).
    """

    CMD_ID = 0x300

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.02, slave_address=None, ignore_ack=False)
    rx = RxData('>HHHHhhhhH')


class PerformForcedCo2Recalibration(Transfer):
    """
    Execute the forced recalibration (FRC) of the CO2 signal on the SCD4x
    sensor. See the datasheet of the SCD41 sensor for details how the
    forced recalibration shall be used.
    """

    CMD_ID = 0x6707

    def __init__(self, target_co2_concentration):
        self._target_co2_concentration = target_co2_concentration

    def pack(self):
        return self.tx_data.pack([self._target_co2_concentration])

    tx = TxData(CMD_ID, '>HH', device_busy_delay=0.5, slave_address=None, ignore_ack=False)
    rx = RxData('>H')


class GetProductName(Transfer):
    """Gets the product name from the device."""

    CMD_ID = 0xd014

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.02, slave_address=None, ignore_ack=False)
    rx = RxData('>32B')


class GetSerialNumber(Transfer):
    """Gets the serial number from the device."""

    CMD_ID = 0xd033

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.02, slave_address=None, ignore_ack=False)
    rx = RxData('>32B')


class GetVersion(Transfer):
    """Gets the version information for the hardware, firmware and communication protocol."""

    CMD_ID = 0xd000

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.02, slave_address=None, ignore_ack=False)
    rx = RxData('>BB?BBBBB')
